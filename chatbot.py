# -*- coding: utf-8 -*-
"""Untitled11.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17bWAlZx1wjzi0AKF1oEBMk60eAvxC3i2
"""

import nltk
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from nltk.tokenize import word_tokenize
from nltk.stem import WordNetLemmatizer

# Download necessary NLTK resources
nltk.download('punkt')
nltk.download('wordnet')
nltk.download('punkt_tab') # Download the missing resource


# Preprocessing function
def preprocess(text):
    tokens = word_tokenize(text.lower())
    lemmatizer = WordNetLemmatizer()
    return ' '.join([lemmatizer.lemmatize(t) for t in tokens if t.isalnum()])

# Sample training data (replace with your own data)
data = pd.DataFrame({
    'text': [
        'Hi there, I need help with my order',
        'What is the status of my delivery?',
        'I want to return a product',
        'Thank you for your service',
        'This is the worst experience ever!',
        'How do I cancel my subscription?',
        'Great service as always!',
        'I have a complaint regarding billing',
        'Can I speak to an agent?',
        'When will my refund be processed?'
    ],
    'intent': [
        'greeting', 'inquiry', 'return', 'thanks', 'complaint',
        'cancel', 'praise', 'complaint', 'inquiry', 'refund'
    ]
})

# Preprocess the text data
data['clean_text'] = data['text'].apply(preprocess)

# Encode the intents
le = LabelEncoder()
data['label'] = le.fit_transform(data['intent'])

# Create features and target variables
X = data['clean_text']
y = data['label']

# Vectorize the text data using TF-IDF
vectorizer = TfidfVectorizer(max_features=1000)
X = vectorizer.fit_transform(X)

# Split data into training and testing sets
# Remove stratify parameter or add more data for under-represented classes
X_train, X_test, y_train, y_test, indices_train, indices_test = train_test_split(
    X, y, data.index, test_size=0.2, random_state=42
    # , stratify=y  # Remove or adjust stratify
)

# Train the chatbot model (Logistic Regression in this case)
model = LogisticRegression(max_iter=1000)
model.fit(X_train, y_train)

# Function to predict intent and respond
def chatbot_response(user_input):
    # Preprocess user input
    processed_input = preprocess(user_input)
    # Vectorize user input
    input_vector = vectorizer.transform([processed_input])
    # Predict intent
    predicted_intent_index = model.predict(input_vector)[0]
    predicted_intent = le.inverse_transform([predicted_intent_index])[0]

    # Define responses based on predicted intent (replace with your own responses)
    responses = {
        'greeting': 'Hello! How can I assist you today?',
        'inquiry': 'I can help you with that. Please provide more details.',
        'return': 'To initiate a return, please visit our website or contact customer service.',
        'thanks': 'You\'re welcome! Glad I could help.',
        'complaint': 'I apologize for the inconvenience. Let\'s see how we can resolve this.',
        'cancel': 'To cancel your subscription, please log in to your account and follow the instructions.',
        'praise': 'Thank you for your kind words! We appreciate your feedback.',
        'refund': 'Your refund will be processed within 5-7 business days.',
    }

    # Return the appropriate response
    return responses.get(predicted_intent, "I'm sorry, I didn't understand your request.")

# Start the chatbot interaction
print("Chatbot: Hello! How can I assist you today?")
while True:
    user_input = input("You: ")
    if user_input.lower() == 'exit':
        break
    response = chatbot_response(user_input)
    print("Chatbot:", response)